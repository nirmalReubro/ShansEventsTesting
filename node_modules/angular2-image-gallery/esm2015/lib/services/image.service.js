/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
export class ImageService {
    constructor() {
        this.imagesUpdatedSource = new Subject();
        this.imageSelectedIndexUpdatedSource = new Subject();
        this.showImageViewerSource = new Subject();
        this.imagesUpdated$ = this.imagesUpdatedSource.asObservable();
        this.imageSelectedIndexUpdated$ = this.imageSelectedIndexUpdatedSource.asObservable();
        this.showImageViewerChanged$ = this.showImageViewerSource.asObservable();
    }
    /**
     * @param {?} images
     * @return {?}
     */
    updateImages(images) {
        this.imagesUpdatedSource.next(images);
    }
    /**
     * @param {?} newIndex
     * @return {?}
     */
    updateSelectedImageIndex(newIndex) {
        this.imageSelectedIndexUpdatedSource.next(newIndex);
    }
    /**
     * @param {?} show
     * @return {?}
     */
    showImageViewer(show) {
        this.showImageViewerSource.next(show);
    }
}
ImageService.decorators = [
    { type: Injectable },
];
function ImageService_tsickle_Closure_declarations() {
    /** @type {?} */
    ImageService.prototype.imagesUpdatedSource;
    /** @type {?} */
    ImageService.prototype.imageSelectedIndexUpdatedSource;
    /** @type {?} */
    ImageService.prototype.showImageViewerSource;
    /** @type {?} */
    ImageService.prototype.imagesUpdated$;
    /** @type {?} */
    ImageService.prototype.imageSelectedIndexUpdated$;
    /** @type {?} */
    ImageService.prototype.showImageViewerChanged$;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLWltYWdlLWdhbGxlcnkvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvaW1hZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBRzFDLE1BQU07O21DQUM0QixJQUFJLE9BQU8sRUFBYzsrQ0FDYixJQUFJLE9BQU8sRUFBVTtxQ0FDL0IsSUFBSSxPQUFPLEVBQVc7OEJBRWIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRTswQ0FDL0IsSUFBSSxDQUFDLCtCQUErQixDQUFDLFlBQVksRUFBRTt1Q0FDckQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksRUFBRTs7Ozs7O0lBRXhGLFlBQVksQ0FBQyxNQUFrQjtRQUMzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3hDOzs7OztJQUVELHdCQUF3QixDQUFDLFFBQWdCO1FBQ3JDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDdEQ7Ozs7O0lBRUQsZUFBZSxDQUFDLElBQWE7UUFDekIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtLQUN4Qzs7O1lBcEJKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJ1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW1hZ2VTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGltYWdlc1VwZGF0ZWRTb3VyY2UgPSBuZXcgU3ViamVjdDxBcnJheTxhbnk+PigpXG4gICAgcHJpdmF0ZSBpbWFnZVNlbGVjdGVkSW5kZXhVcGRhdGVkU291cmNlID0gbmV3IFN1YmplY3Q8bnVtYmVyPigpXG4gICAgcHJpdmF0ZSBzaG93SW1hZ2VWaWV3ZXJTb3VyY2UgPSBuZXcgU3ViamVjdDxib29sZWFuPigpXG5cbiAgICBpbWFnZXNVcGRhdGVkJDogT2JzZXJ2YWJsZTxBcnJheTxhbnk+PiA9IHRoaXMuaW1hZ2VzVXBkYXRlZFNvdXJjZS5hc09ic2VydmFibGUoKVxuICAgIGltYWdlU2VsZWN0ZWRJbmRleFVwZGF0ZWQkOiBPYnNlcnZhYmxlPG51bWJlcj4gPSB0aGlzLmltYWdlU2VsZWN0ZWRJbmRleFVwZGF0ZWRTb3VyY2UuYXNPYnNlcnZhYmxlKClcbiAgICBzaG93SW1hZ2VWaWV3ZXJDaGFuZ2VkJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuc2hvd0ltYWdlVmlld2VyU291cmNlLmFzT2JzZXJ2YWJsZSgpXG5cbiAgICB1cGRhdGVJbWFnZXMoaW1hZ2VzOiBBcnJheTxhbnk+KTogdm9pZCB7XG4gICAgICAgIHRoaXMuaW1hZ2VzVXBkYXRlZFNvdXJjZS5uZXh0KGltYWdlcylcbiAgICB9XG5cbiAgICB1cGRhdGVTZWxlY3RlZEltYWdlSW5kZXgobmV3SW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmltYWdlU2VsZWN0ZWRJbmRleFVwZGF0ZWRTb3VyY2UubmV4dChuZXdJbmRleClcbiAgICB9XG5cbiAgICBzaG93SW1hZ2VWaWV3ZXIoc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnNob3dJbWFnZVZpZXdlclNvdXJjZS5uZXh0KHNob3cpXG4gICAgfVxufVxuIl19